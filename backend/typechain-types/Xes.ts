/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface XesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "amountFounded"
      | "creator"
      | "fundMe"
      | "getKeys"
      | "getUserAddress"
      | "keys"
      | "send"
      | "userCreate"
      | "users"
      | "withdrawFundMe"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "amountFounded",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fundMe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getKeys", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUserAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "keys", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "userCreate", values: [string]): string;
  encodeFunctionData(functionFragment: "users", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawFundMe",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "amountFounded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fundMe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getKeys", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keys", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userCreate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFundMe",
    data: BytesLike
  ): Result;
}

export interface Xes extends BaseContract {
  connect(runner?: ContractRunner | null): Xes;
  waitForDeployment(): Promise<this>;

  interface: XesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  amountFounded: TypedContractMethod<[], [bigint], "view">;

  creator: TypedContractMethod<[], [string], "view">;

  fundMe: TypedContractMethod<[amount: BigNumberish], [void], "payable">;

  getKeys: TypedContractMethod<[], [string[]], "view">;

  getUserAddress: TypedContractMethod<[username: string], [string], "view">;

  keys: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  send: TypedContractMethod<
    [username: string, amount: BigNumberish],
    [void],
    "payable"
  >;

  userCreate: TypedContractMethod<[username: string], [void], "nonpayable">;

  users: TypedContractMethod<[arg0: string], [string], "view">;

  withdrawFundMe: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "amountFounded"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "creator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fundMe"
  ): TypedContractMethod<[amount: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "getKeys"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getUserAddress"
  ): TypedContractMethod<[username: string], [string], "view">;
  getFunction(
    nameOrSignature: "keys"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "send"
  ): TypedContractMethod<
    [username: string, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "userCreate"
  ): TypedContractMethod<[username: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "users"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawFundMe"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}
